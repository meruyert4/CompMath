import numpy as np

def Gauss_jordan(A, b):
    A = np.array(A, dtype=float)
    b = np.array(b, dtype=float).reshape(-1, 1)
    augmented_matrix = np.hstack((A, b))

    n = len(b)

    for i in range(n):
        max_row = i + np.argmax(abs(augmented_matrix[i:, i]))
        augmented_matrix[[i, max_row]] = augmented_matrix[[max_row, i]]

        if abs(augmented_matrix[i, i]) < 1e-12:
            print("The system has no unique solution.")
            return None

        augmented_matrix[i] /= augmented_matrix[i, i]

        for j in range(n):
            if j != i:
                factor = augmented_matrix[j, i]
                augmented_matrix[j] -= factor * augmented_matrix[i]

    x = augmented_matrix[:, -1]
    return x

# Example usage
# A = [[1, 1, 1],
#      [2, -3, 4],
#      [3, 4, 5]]
# b = [9, 13, 40]
#
# solution = Gauss_jordan(A, b)
# if solution is not None:
#     print("Solution:", solution)













import numpy as np

def Relaxation_method(A, b, x0, omega, tolerance=1e-6, max_iterations=100):
    n = len(b)
    x = x0.copy()

    for k in range(max_iterations):
        x_old = x.copy()

        for i in range(n):
            sigma = sum(A[i, j] * x[j] for j in range(n) if j != i)
            x[i] = (1 - omega) * x[i] + (omega / A[i, i]) * (b[i] - sigma)

        # Check convergence
        if np.linalg.norm(x - x_old, ord=np.inf) < tolerance:
            return x, k + 1

    raise ValueError("Solution did not converge within the maximum number of iterations")

# Example usage
A = np.array([[4, -1, 0, 0],
              [-1, 4, -1, 0],
              [0, -1, 4, -1],
              [0, 0, -1, 3]], dtype=float)

b = np.array([15, 10, 10, 10], dtype=float)
x0 = np.zeros(len(b))
omega = 1.25  # Relaxation factor

tolerance = 1e-6
max_iterations = 100

# try:
#     solution, iterations = Relaxation_method(A, b, x0, omega, tolerance, max_iterations)
#     print(f"Solution: {solution}")
#     print(f"Iterations: {iterations}")
# except ValueError as e:
#     print(e)
